///
/// @file Core
/// @author Mancobian Poemandres
/// @license BSD License
///
/// Copyright (c) MMX by Royal Society of Secret Design
/// All rights reserved
///
/// Redistribution and use in source and binary forms, with or without
/// modification, are permitted provided that the following conditions are met:
///
///    * Redistributions of source code must retain the above copyright notice,
/// 		this list of conditions and the following disclaimer.
///    * Redistributions in binary form must reproduce the above copyright notice,
/// 		this list of conditions and the following disclaimer in the documentation
/// 		and/or other materials provided with the distribution.
///    * Neither the name of Royal Society of Secret Design nor the names of its
/// 		contributors may be used to endorse or promote products derived from
/// 		this software without specific prior written permission.
///
/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
/// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
/// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
/// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
/// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
/// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
/// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
/// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
/// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
/// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

#ifndef RSSD_CORE_CORE
#define RSSD_CORE_CORE

#include "ThirdParty.h"
#include "System"
#include "Filesystem"
#include "Pattern"
#include "Concurrency"
#include "Timer"
#include "Input"
#include "Serialization"

namespace RSSD {
namespace Core {

void create()
{
  /// Timer
  new Timer::Manager();
  new PosixTimer::Factory();
  new WindowsTimer::Factory();

  /// Input
  new Input::Device::Factory::Manager();
  new Input::Keyboard::Factory();
  new Input::Mouse::Factory();
  new Input::OisKeyboard::Factory();
  new Input::OisMouse::Factory();
  
  /// LibCDS
  Concurrency::GarbageCollector::GarbageCollector::Construct();
  cds::threading::Manager::attachThread();
}

void destroy()
{
  /// Timer
  delete Timer::Manager::getPointer();
  delete PosixTimer::Factory::getPointer();
  delete WindowsTimer::Factory::getPointer();

  /// Input
  delete Input::Keyboard::Factory::getPointer();
  delete Input::Mouse::Factory::getPointer();
  delete Input::OisKeyboard::Factory::getPointer();
  delete Input::OisMouse::Factory::getPointer();
  delete Input::Device::Factory::Manager::getPointer();
  
  /// LibCDS
  cds::threading::Manager::detachThread()   ;
  Concurrency::GarbageCollector::GarbageCollector::Destruct();
}

} /// namespace Core
} /// namespace RSSD

#endif // RSSD_CORE_CORE
